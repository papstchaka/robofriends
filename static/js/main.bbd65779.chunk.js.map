{"version":3,"sources":["reducers.js","components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Card","name","email","id","src","alt","CardList","map","user","i","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","this","setState","Component","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","href","target","position","color","top","left","connect","searchRobots","requestRobots","dispatch","event","payload","value","fetch","then","response","json","data","catch","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bbd65779.chunk.js","sourcesContent":["import \r\n{ \r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: \"\"\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCHFIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: \"\"\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\n\r\nfunction SearchBox({searchfield, searchChange}) {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n                className=\"tc pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\" \r\n                placeholder=\"search Robots\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nfunction Card({name,email,id}) {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nfunction CardList({ robots }) {\r\n    return (\r\n        <div>\r\n           { \r\n           robots.map((user,i) => {\r\n                return (\r\n                    <Card \r\n                    key={robots[i].id} \r\n                    id={robots[i].id} \r\n                    name={robots[i].name} \r\n                    email={robots[i].email}\r\n                    />\r\n                    );\r\n            })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nfunction Scroll(props) {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '600px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return (\r\n                <h1>Oooops. Something went wrong</h1>\r\n            )\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport \"./App.css\";\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    } \r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return isPending ?\r\n            <h1>L o a d i n g ..</h1> :\r\n            (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f2\">RoboFriends</h1>\r\n                    <SearchBox searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                    <a href=\"https://github.com/papstchaka\" target=\"_blank\" style={{position: \"fixed\", color: \"black\", top: \"5px\", left: \"5px\"}}>[2020] Alexander Christoph</a>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import \r\n{ \r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCHFIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, connect } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nimport App from './containers/App';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}